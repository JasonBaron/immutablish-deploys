# - hosts: localhost
#   gather_facts: no
#   connection: local
#   roles:
#   - infra   
#   - asg
 
- hosts: localhost
  gather_facts: no
  connection: local
  tasks:

  # temporarily increase the desired_capacity and minimum_size by
  # the batch_size
  - name: get autoscale group info
    ec2_asg: name=rollingAMI region=us-east-1
    register: asg_info


  - name: set temporary settings
    ec2_asg: name=rollingAMI region=us-east-1 
             desired_capacity=6
             min_size=6

# add hosts to a group created by group_by for their ec2_image_id
# and use intersection of imaged_id and autoscale_groupName as 
# host target (ensures we are tackling old hosts)
- hosts: tag_aws_autoscaling_groupName_rollingAMI
  connection: local
  gather_facts: no
  tasks:
  - local_action: group_by key={{ hostvars[inventory_hostname]['ec2_image_id'] }}


- hosts: tag_aws_autoscaling_groupName_rollingAMI:!{{ image_id }}
  gather_facts: no
  serial: 1
  vars:
    capacity: 5
  tasks:
  - local_action: debug var=hostvars[inventory_hostname]['ec2_image_id']

  - name: terminate ec2 instance
    local_action: ec2 state=absent
                  instance_ids={{ hostvars[inventory_hostname]['ec2_id'] }}
                  region=us-east-1
                  wait=yes

  - pause: seconds=61
  - name: wait for number_of_healthy_instances >= desired_capacity
    local_action: ec2_asg_facts name=rollingAMI region=us-east-1
    register: result
    until: result.healthy_instances >= capacity
    delay: 10
    retries: 120


# set the ASG to normal settings
- hosts: localhost
  gather_facts: no
  connection: local
  tasks:
  - name: return settings to normal
    ec2_asg: name=rollingAMI region=us-east-1 
             desired_capacity=5
             min_size=5


