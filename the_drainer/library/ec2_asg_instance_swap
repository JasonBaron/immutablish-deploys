#!/usr/bin/env python
# This file is part of Ansible
#
# Ansible is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Ansible is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Ansible.  If not, see <http://www.gnu.org/licenses/>.

import sys
import time

try:
    import boto.ec2.autoscale
    from boto.ec2.autoscale import AutoScaleConnection, AutoScalingGroup
    from boto.exception import BotoServerError
except ImportError:
    print "failed=True msg='boto required for this module'"
    sys.exit(1)


ASG_ATTRIBUTES = ('launch_config_name', 'min_size', 'max_size', 'desired_capacity', 'health_check_type')
INSTANCE_ATTRIBUTES = ('instance_id', 'health_status', 'lifecycle_state', 'launch_config_name')

# add support for getting health state of any one instance (could build dynamic groups)
# of unhealthy instances ?

def get_asg_properties(autoscaling_group):
    properties = dict((attr, getattr(autoscaling_group, attr)) for attr in ASG_ATTRIBUTES)
    properties['load_balancers'] = autoscaling_group.load_balancers
    return properties


def set_temp_asg_properties(autoscaling_group):
    changed = False
    for attr in ASG_ATTRIBUTES:
            if module.params.get(attr) and getattr(as_group, attr) != module.params.get(attr):
                changed = True
                setattr(as_group, attr, module.params.get(attr))
    if changed:
        as_group.update()


def get_instance_properties(autoscaling_group):
    properties= {}
    properties['healthy_instances'] = 0
    properties['in_service_instances'] = 0
    properties['unhealthy_instances'] = 0
    properties['pending_instances'] = 0
    properties['viable'] = 0
    properties['terminating_instances'] = 0
    if autoscaling_group.instances:
        properties['instances'] = []
        for i in autoscaling_group.instances:
            info = dict((attr, getattr(i, attr)) for attr in INSTANCE_ATTRIBUTES)
            properties['instances'].append(info)
        for i in properties['instances']:

            if i['health_status'] == 'Healthy' and i['lifecycle_state'] == 'InService':
                properties['viable'] += 1
            if i['health_status'] == 'Healthy':
                properties['healthy_instances'] += 1
            else:
                properties['unhealthy_instances'] += 1
            if i['lifecycle_state'] == 'InService':
                properties['in_service_instances'] += 1
            if i['lifecycle_state'] == 'Terminating':
                properties['terminating_instances'] += 1
            if i['lifecycle_state'] == 'Pending':
                properties['pending_instances'] += 1

    return properties

def main():
    argument_spec = ec2_argument_spec()
    argument_spec.update(
        dict(
            name=dict(required=True, type='str'),
            wait=dict(required=False, default=30, type='int'),
            instance_ids=dict(required=False, type='list'),
            force_swap=dict(required=False, default=False, type='bool')
        )
    )
    module = AnsibleModule(argument_spec=argument_spec)
    group_name = module.params.get('name')
    instance_ids = module.params.get('instance_ids')
    force_swap=module.params.get('force_swap')
    region, ec2_url, aws_connect_params = get_aws_connection_info(module)
    try:
        asg_connection = connect_to_aws(boto.ec2.autoscale, region, **aws_connect_params)
        if not asg_connection:
            module.fail_json(msg="failed to connect to AWS for the given region: %s" % str(region))
    except boto.exception.NoAuthHandlerFound, e:
        module.fail_json(msg=str(e))

    as_groups = asg_connection.get_all_groups(names=[group_name])
    as_group = as_groups[0]
    changed = False
    props = {}
    props['asg_properties'] = get_asg_properties(as_group)
    props['instance_ids'] = instance_ids
    min_size = props['asg_properties']['min_size']
    launch_config_name = props['asg_properties']['launch_config_name']

    if force_swap:
        # let's make sure no instances given to us are already running the latest launch config
        instance_props = get_instance_properties(as_group)
        for d in instance_props["instances"]:
            if d["instance_id"] in instance_ids and d["launch_config_name"] == launch_config_name:
                instance_ids.remove(d["instance_id"])

    # Set given instance to unhealthy status, will force termination but allow
    # connection draining to happen if using ELB 
    for instance in instance_ids:
          asg_connection.set_instance_health(instance,'Unhealthy')

    as_groups = asg_connection.get_all_groups(names=[group_name])
    as_group = as_groups[0]
    instance_props = get_instance_properties(as_group)
    
    # first we wait to make sure the machines we marked as Unhealthy are
    # no longer in the list
    # this could be refactored
    count = 1
    while count > 0:
        count = 0
        as_groups = asg_connection.get_all_groups(names=[group_name])
        as_group = as_groups[0]
        instance_props = get_instance_properties(as_group)
        for instance in instance_props["instances"]:
            if instance in instance_ids:
                if instance["lifecycle_state"] == "Terminating" or instance["health_status"] == 'Unhealthy':
                    count += 1
        time.sleep(10)

    # make sure we have the latest stats after that last loop.
    as_groups = asg_connection.get_all_groups(names=[group_name])
    as_group = as_groups[0]
    instance_props = get_instance_properties(as_group)

    # now we make sure that we have enough instances in a viable state
    while min_size > instance_props['viable']:
        time.sleep(10)
        as_groups = asg_connection.get_all_groups(names=[group_name])
        as_group = as_groups[0]
        instance_props = get_instance_properties(as_group)

    # collect final stats info
    as_groups = asg_connection.get_all_groups(names=[group_name])
    as_group = as_groups[0]
    props['instance_properties'] = get_instance_properties(as_group)
    props['asg_properties'] = get_asg_properties(as_group)
    result = module.exit_json(changed=True, **props) 


# import module snippets
from ansible.module_utils.basic import *
from ansible.module_utils.ec2 import *

main()

