#!/usr/bin/env python
# This file is part of Ansible
#
# Ansible is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Ansible is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Ansible.  If not, see <http://www.gnu.org/licenses/>.

import sys
import time

try:
    import boto.ec2.autoscale
    from boto.ec2.autoscale import AutoScaleConnection, AutoScalingGroup
    from boto.exception import BotoServerError
except ImportError:
    print "failed=True msg='boto required for this module'"
    sys.exit(1)

ASG_ATTRIBUTES = ('min_size', 'desired_capacity')
INSTANCE_ATTRIBUTES = ('instance_id', 'health_status', 'lifecycle_state', 'launch_config_name')

# add support for getting health state of any one instance (could build dynamic groups)
# of unhealthy instances ?

def get_properties(autoscaling_group):
    properties= {}
    properties['healthy_instances'] = 0
    properties['in_service_instances'] = 0
    properties['unhealthy_instances'] = 0
    if autoscaling_group.instances:
        properties['instances'] = []
        for i in autoscaling_group.instances:
            info = dict((attr, getattr(i, attr)) for attr in INSTANCE_ATTRIBUTES)
            properties['instances'].append(info)
        for i in properties['instances']:
            if i['health_status'] == 'Healthy':
                properties['healthy_instances'] += 1
            else:
                properties['unhealthy_instances'] += 1
            if i['lifecycle_state'] == 'InService':
                properties['in_service_instances'] += 1
            else:
                properties['unhealthy_instances'] += 1                
    return properties

def main():
    argument_spec = ec2_argument_spec()
    argument_spec.update(
        dict(
            name=dict(required=True, type='str'),
            ami=dict(required=False, default=None, type='str')
        )
    )
    module = AnsibleModule(argument_spec=argument_spec)
    group_name = module.params.get('name')
    ami = module.params.get('ami')


    region, ec2_url, aws_connect_params = get_aws_connection_info(module)
    try:
        connection = connect_to_aws(boto.ec2.autoscale, region, **aws_connect_params)
        if not connection:
            module.fail_json(msg="failed to connect to AWS for the given region: %s" % str(region))
    except boto.exception.NoAuthHandlerFound, e:
        module.fail_json(msg=str(e))

    as_groups = connection.get_all_groups(names=[group_name])

    as_group = as_groups[0]
    changed = False
    props = get_properties(as_group)



    result = module.exit_json(changed=changed, **props) 


# import module snippets
from ansible.module_utils.basic import *
from ansible.module_utils.ec2 import *

main()

